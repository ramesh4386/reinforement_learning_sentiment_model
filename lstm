#install
pip install pandas numpy ta scikit-learn tensorflow  

#lstm model
import pandas as pd  
import numpy as np  
import ta  
from ta.utils import dropna  
from ta.volatility import BollingerBands, AverageTrueRange  
from ta.trend import SMAIndicator, EMAIndicator, MACD  
from ta.momentum import RSIIndicator, StochasticOscillator  
from ta.volume import OnBalanceVolumeIndicator, VolumePriceTrendIndicator  
from sklearn.preprocessing import MinMaxScaler  
from tensorflow.keras.models import Sequential  
from tensorflow.keras.layers import Dense, LSTM  
  
# Load historical data  
# You can replace this with your own data source  
data = pd.read_csv("historical_data.csv")  
data["Date"] = pd.to_datetime(data["Date"])  
data.set_index("Date", inplace=True)  
  
# Preprocess the data  
data = dropna(data)  
  
# Create additional indicators  
data["SMA9"] = SMAIndicator(data["Close"], 9).sma_indicator()  
data["SMA50"] = SMAIndicator(data["Close"], 50).sma_indicator()  
data["EMA9"] = EMAIndicator(data["Close"], 9).ema_indicator()  
data["EMA50"] = EMAIndicator(data["Close"], 50).ema_indicator()  
data["RSI"] = RSIIndicator(data["Close"], 14).rsi()  
data["Stochastic"] = StochasticOscillator(data["High"], data["Low"], data["Close"]).stoch()  
data["%K"] = StochasticOscillator(data["High"], data["Low"], data["Close"]).stoch_signal()  
indicator_bb = BollingerBands(data["Close"])  
data["BBH"] = indicator_bb.bollinger_hband()  
data["BBL"] = indicator_bb.bollinger_lband()  
data["Volume"] = data["Volume"]  
data["MACD"] = MACD(data["Close"]).macd()  
data["ATR"] = AverageTrueRange(data["High"], data["Low"], data["Close"]).average_true_range()  
data["OBV"] = OnBalanceVolumeIndicator(data["Close"], data["Volume"]).on_balance_volume()  
data["VPT"] = VolumePriceTrendIndicator(data["Close"], data["Volume"]).volume_price_trend()  
  
# You can add more indicators, such as candlestick patterns, Fibonacci retracement levels, support and resistance levels, and order flow data, as needed  
  
# Drop rows with NaN values  
data.dropna(inplace=True)  
  
# Split the data into training and test sets  
train_data, test_data = data[:int(len(data)*0.8)], data[int(len(data)*0.8):]  
  
# Scale the features  
scaler = MinMaxScaler(feature_range=(0, 1))  
scaled_data = scaler.fit_transform(train_data)  
  
# Prepare the input data for LSTM  
def create_dataset(dataset, window_size):  
    X, Y = [], []  
    for i in range(len(dataset) - window_size):  
        X.append(dataset[i:(i + window_size), :])  
        Y.append(dataset[i + window_size, 0])  
    return np.array(X), np.array(Y)  
  
window_size = 120  
X_train, y_train = create_dataset(scaled_data, window_size)  
  
# Build the LSTM model  
model = Sequential()  
model.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))  
model.add(LSTM(units=100, return_sequences=True))  
model.add(LSTM(units=100, return_sequences=False))  
model.add(Dense(units=50))  
model.add(Dense(units=1))  
  
# Train the model  
model.compile(optimizer="adam", loss="mean_squared_error")  
model.fit(X_train, y_train, epochs=20, batch_size=64)  
  
# Make predictions  
# Make predictions  
test_data_scaled = scaler.transform(test_data)  
X_test, y_test = create_dataset(test_data_scaled, window_size)  
predictions = model.predict(X_test)  
  
# Inverse transform the predictions  
#predictions = scaler.inverse_transform(np.concatenate((predictions, X_test[:, :, 1:]), axis=2))[:, 0]
# Create a dummy array with the same shape as the test dataset  
dummy_array = np.zeros((predictions.shape[0], test_data_scaled.shape[1]))  
  
# Replace the first column of the dummy array with the predictions  
dummy_array[:, 0] = predictions[:, 0]  
  
# Inverse transform the predictions  
predictions_inverse_transformed = scaler.inverse_transform(dummy_array)[:, 0]  

  
# Generate buy and sell signals  
buy_signals = []  
sell_signals = []  
  
for i in range(1, len(predictions)):  
    if predictions[i] > test_data.iloc[i]["SMA9"] and predictions[i] > test_data.iloc[i]["SMA50"]:  
        buy_signals.append((test_data.index[i], test_data.iloc[i]["Close"]))  
    elif predictions[i] < test_data.iloc[i]["SMA9"] and predictions[i] < test_data.iloc[i]["SMA50"]:  
        sell_signals.append((test_data.index[i], test_data.iloc[i]["Close"]))  
  
# Print buy and sell signals with their corresponding timestamps  
print("Buy signals:")  
for signal in buy_signals:  
    print(f"Time: {signal[0]}, Price: {signal[1]}")  
  
print("\nSell signals:")  
for signal in sell_signals:  
    print(f"Time: {signal[0]}, Price: {signal[1]}") 

##############################################
import plotly.graph_objects as go  
  
# Create a Plotly figure  
fig = go.Figure()  
  
# Add actual price trace  
fig.add_trace(go.Scatter(x=test_data.index[window_size:], y=test_data['Close'][window_size:], mode='lines', name='Actual Price'))  
  
# Add predicted price trace  
fig.add_trace(go.Scatter(x=test_data.index[window_size:], y=predictions, mode='lines', name='Predicted Price'))  
  
# Customize the layout  
fig.update_layout(  
    title='SYP/USD Actual vs Predicted Price',  
    xaxis_title='Date',  
    yaxis_title='Price',  
)  
  
# Show the figure  
fig.show()  

###############################

import plotly.graph_objects as go  
  
# Create a Plotly figure  
fig = go.Figure()  
  
# Add actual price trace  
fig.add_trace(go.Scatter(x=test_data.index[window_size:], y=test_data['Close'][window_size:], mode='lines', name='Actual Price'))  
  
# Add predicted price trace  
fig.add_trace(go.Scatter(x=test_data.index[window_size:], y=predictions, mode='lines', name='Predicted Price'))  
  
# Customize the layout  
fig.update_layout(  
    title='SYP/USD Actual vs Predicted Price',  
    xaxis_title='Date',  
    yaxis_title='Price',  
)  
  
# Show the figure  
fig.show()  
#############################################

buy_signals = []  
sell_signals = []  
  
for i in range(len(predictions)):  
    # Buy signal conditions  
    sma_condition = predictions[i] > test_data.iloc[i]["SMA9"] and predictions[i] > test_data.iloc[i]["SMA50"]  
    rsi_condition = test_data.iloc[i]["RSI"] < 30  
    macd_condition = test_data.iloc[i]["MACD"] > 0  
    stochastic_condition = test_data.iloc[i]["Stochastic"] < 20 and test_data.iloc[i]["%K"] < 20  
  
    # Sell signal conditions  
    sma_sell_condition = predictions[i] < test_data.iloc[i]["SMA9"] and predictions[i] < test_data.iloc[i]["SMA50"]  
    rsi_sell_condition = test_data.iloc[i]["RSI"] > 70  
    macd_sell_condition = test_data.iloc[i]["MACD"] < 0  
    stochastic_sell_condition = test_data.iloc[i]["Stochastic"] > 80 and test_data.iloc[i]["%K"] > 80  
  
    print(f"Index: {i}, SMA condition: {sma_condition}, RSI condition: {rsi_condition}, MACD condition: {macd_condition}, Stochastic condition: {stochastic_condition}")  
  
    if sma_condition and rsi_condition and macd_condition and stochastic_condition:  
        buy_signals.append((test_data.index[i], test_data.iloc[i]["Close"]))  
    elif sma_sell_condition and rsi_sell_condition and macd_sell_condition and stochastic_sell_condition:  
        sell_signals.append((test_data.index[i], test_data.iloc[i]["Close"]))  
  
print("Buy signals:")  
for signal in buy_signals:  
    print(f"Time: {signal[0]}, Price: {signal[1]}")  
  
print("\nSell signals:")  
for signal in sell_signals:  
    print(f"Time: {signal[0]}, Price: {signal[1]}")  


""" 
In this updated version, we have added the following conditions:
Buy signal conditions:
RSI is below 30 (oversold)
MACD is above 0 (positive momentum)
Stochastic Oscillator and %K are below 20 (oversold)
Sell signal conditions:
RSI is above 70 (overbought)
MACD is below 0 (negative momentum)
Stochastic Oscillator and %K are above 80 (overbought)"""


