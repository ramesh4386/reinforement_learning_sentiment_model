#cosine similarity (innner grouping)
# sentance transfomer is used to transform document to vector. 
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
model = SentenceTransformer('paraphrase-MiniLM-L6-v2')

def consine_similarity_score(text1, text2):
  vec_1 = model.encode([text1])
  vec_2 = model.encode([text2])
  similarity_score=cosine_similarity(vec_1, vec_2)
  return similarity_score
  
  
 #cosine similarity grouping (outer grouping)

topic_list=topics_after_similarity_filter
topics =topic_list
parent_topic=[]
kids_topics=[]
kids_simi_score=[]
for topic in topics:
  topic_index = topics.index(topic)
  rest_of_the_topics = topics[topic_index+1:]
  similarity_scores=[]
  correspond_topics =[]
  for topic1 in rest_of_the_topics:
    similarity_score_value=consine_similarity_score(topic, topic1)
    if similarity_score_value> 0.55:
      similarity_scores.append(similarity_score_value)
      correspond_topics.append(topic1)
  parent_topic.append(topic)
  kids_topics.append(correspond_topics)
  kids_simi_score.append(similarity_scores)

cosine_similarity_groupping=dict(zip(parent_topic, kids_topics))
print(cosine_similarity_groupping)
####################################TOP5##########################
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def find_similar_texts(text_data):
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(text_data)
    similarity_matrix = cosine_similarity(X)
    
    results = []
    for i in range(len(text_data)):
        similarities = similarity_matrix[i]
        indices = similarities.argsort()[::-1][:5]  # Sort indices in descending order
        scores = similarities[indices]
        similar_texts = [text_data[j] for j in indices]
        
        result = {
            'Text': text_data[i],
            'Similar Text 1': similar_texts[0],
            'Similar Text 2': similar_texts[1],
            'Similar Text 3': similar_texts[2],
            'Similar Text 4': similar_texts[3],
            'Similar Text 5': similar_texts[4],
            'Score 1': scores[0],
            'Score 2': scores[1],
            'Score 3': scores[2],
            'Score 4': scores[3],
            'Score 5': scores[4]
        }
        results.append(result)
    
    df = pd.DataFrame(results)
    return df

# Example usage
text_data = [
    "This is the first document.",
    "This document is the second document.",
    "And this is the third one.",
    "Is this the first document?",
]

similar_texts_df = find_similar_texts(text_data)
print(similar_texts_df)

