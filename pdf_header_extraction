import pandas as pd  
from pdfminer.high_level import extract_pages  
from pdfminer.layout import LTTextContainer, LTChar  
  
def extract_text_info(file_path):  
    data = []  
  
    for page_num, page_layout in enumerate(extract_pages(file_path), start=1):  
        for element in page_layout:  
            if isinstance(element, LTTextContainer):  
                prev_line_y = None  
                for text_line in element:  
                    text = ""  
                    font_size = 0  
                    space_up = 0  
                    space_down = 0  
  
                    # Iterate through LTChar objects and find the first character's font size  
                    for character in text_line:  
                        if isinstance(character, LTChar):  
                            font_size = character.size  
                            break  
  
                    # Build the text string and calculate vertical space  
                    for idx, character in enumerate(text_line):  
                        if isinstance(character, LTChar):  
                            text += character.get_text()  
  
                            if idx > 0 and prev_line_y is not None:  
                                space_down = prev_line_y - character.bbox[3]  
                                space_up = character.bbox[1] - prev_line_y  
  
                            prev_line_y = character.bbox[1]  
  
                    data.append({  
                        "text": text,  
                        "font_size": font_size,  
                        "space_up": space_up,  
                        "space_down": space_down,  
                        "page_num": page_num  
                    })  
  
    return pd.DataFrame(data)  
  
file_path = "path/to/your/pdf/file.pdf"  
df = extract_text_info(file_path)  
print(df)  


#########################################

#!pip install PyMuPDF  

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_y = None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        y0 = line["bbox"][1]  
  
                        if prev_line_y is not None:  
                            space_down = prev_line_y - y0  
                            space_up = y0 - prev_line_y  
                        else:  
                            space_up = 0  
                            space_down = 0  
  
                        prev_line_y = y0  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "page_num": page_num + 1  
                        })  
  
    return pd.DataFrame(data)  
  
# file_path = "path"  
# df = extract_text_info(file_path)  
# print(df)

####################################

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_x0, prev_line_x1 = None, None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        x0, y0, x1, y1 = line["bbox"]  
  
                        if prev_line_x0 is not None and prev_line_x1 is not None:  
                            space_up = y0 - prev_line_y  
                            space_down = prev_line_y - y0  
                            space_front = x0 - prev_line_x0  
                            space_back = prev_line_x1 - x1  
                        else:  
                            space_up = 0  
                            space_down = 0  
                            space_front = 0  
                            space_back = 0  
  
                        prev_line_y = y0  
                        prev_line_x0, prev_line_x1 = x0, x1  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "space_front": space_front,  
                            "space_back": space_back,  
                            "page_num": page_num + 1  
                        })  
  
    return pd.DataFrame(data)  
  
file_path = "./path"  
df = extract_text_info(file_path)  
print(df)  

##################################

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_x0, prev_line_x1 = None, None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        x0, y0, x1, y1 = line["bbox"]  
  
                        # Check if the text is bold  
                        font_name = line["spans"][0]["font"]  
                        bold = "Bold" in font_name  
  
                        if prev_line_x0 is not None and prev_line_x1 is not None:  
                            space_up = y0 - prev_line_y  
                            space_down = prev_line_y - y0  
                            space_front = x0 - prev_line_x0  
                            space_back = prev_line_x1 - x1  
                        else:  
                            space_up = 0  
                            space_down = 0  
                            space_front = 0  
                            space_back = 0  
  
                        prev_line_y = y0  
                        prev_line_x0, prev_line_x1 = x0, x1  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "space_front": space_front,  
                            "space_back": space_back,  
                            "page_num": page_num + 1,  
                            "Bold": bold  
                        })  
  
    return pd.DataFrame(data)  
  
file_path = "./path"  
df = extract_text_info(file_path)  
print(df)  
###############################

import fitz  # PyMuPDF  
  
def is_bold(font_name):  
    bold_substrings = ["bold", "black", "heavy", "bd"]  
    return any(substring.lower() in font_name.lower() for substring in bold_substrings)  
  
def extract_text_and_properties_from_pdf(file_path, page_number):  
    doc = fitz.open(file_path)  
      
    if page_number < 0 or page_number >= len(doc):  
        raise ValueError("Invalid page number")  
  
    page = doc[page_number]  
    blocks = page.get_text("dict")["blocks"]  
  
    for block in blocks:  
        if block["type"] == 0:  # Text block  
            for line in block["lines"]:  
                for span in line["spans"]:  
                    print(f"Text: {span['text']}")  
                    print(f"Fontname: {span['font']}")  
                    print(f"Size: {span['size']}")  
                    print(f"Bold: {is_bold(span['font'])}")  
                    print("----")  
  
file_path = "path/to/your/pdf/document.pdf"  
page_number = 0  # Extract information from the first page  
extract_text_and_properties_from_pdf(file_path, page_number)  
##############################################################
import fitz  # PyMuPDF  
import re  
  
def is_bold(font_name):  
    bold_substrings = ["bold", "black", "heavy", "bd"]  
    return any(substring.lower() in font_name.lower() for substring in bold_substrings)  
  
def is_italic(font_name):  
    return "italic" in font_name.lower() or "oblique" in font_name.lower()  
  
def is_all_caps(text):  
    return text.isupper()  
  
def has_bigger_spaces(span, avg_size):  
    return span['size'] > avg_size * 1.5  
  
def is_valid_header(header):  
    header_pattern = re.compile(r'^[A-Z][a-zA-Z0-9 ]*$')  
    return header_pattern.match(header)  
  
def extract_headers_from_pdf(file_path, page_number):  
    doc = fitz.open(file_path)  
  
    if page_number < 0 or page_number >= len(doc):  
        raise ValueError("Invalid page number")  
  
    page = doc[page_number]  
    blocks = page.get_text("dict")["blocks"]  
  
    headers = []  
    total_size = 0  
    span_count = 0  
  
    for block in blocks:  
        if block["type"] == 0:  # Text block  
            for line in block["lines"]:  
                for span in line["spans"]:  
                    total_size += span['size']  
                    span_count += 1  
  
    avg_size = total_size / span_count  
  
    for block in blocks:  
        if block["type"] == 0:  # Text block  
            for line in block["lines"]:  
                for span in line["spans"]:  
                    if (is_bold(span['font']) or is_italic(span['font']) or is_all_caps(span['text'])) and has_bigger_spaces(span, avg_size) and is_valid_header(span['text']):  
                        headers.append(span['text'])  
  
    return headers  
  
file_path = "path/to/your/pdf/document.pdf"  
page_number = 0  # Extract information from the first page  
headers = extract_headers_from_pdf(file_path, page_number)  
  
print("Headers:")  
for header in headers:  
    print(header)  
############################################

import os  
import requests  
from io import BytesIO  
from azure.core.credentials import AzureKeyCredential  
from azure.ai.formrecognizer import FormRecognizerClient  
  
def is_heading(line, threshold=1.5):  
    avg_font_size = sum([word.font_size for word in line.words]) / len(line.words)  
    return avg_font_size > threshold * global_avg_font_size  
  
# Set up the Form Recognizer client  
key = "your_api_key"  # Replace with your "Key1" value  
endpoint = "your_endpoint"  # Replace with your "Endpoint" value  
client = FormRecognizerClient(endpoint, AzureKeyCredential(key))  
  
# Download the PDF document from a URL  
url = "https://www.learningcontainer.com/wp-content/uploads/2019/09/sample-pdf-file.pdf"  
response = requests.get(url)  
pdf_data = BytesIO(response.content)  
  
# Analyze the PDF document  
poller = client.begin_recognize_content(pdf_data)  
  
# Get the extracted content  
content = poller.result()  
  
# Calculate the global average font size  
total_font_size = 0  
total_words = 0  
for page in content:  
    for line in page.lines:  
        total_font_size += sum([word.font_size for word in line.words])  
        total_words += len(line.words)  
global_avg_font_size = total_font_size / total_words  
  
# Extract text, page numbers, and headings  
for idx, page in enumerate(content):  
    print(f"Page {idx + 1}:")  
  
    for line in page.lines:  
        print(f"  Line: {line.content}")  
  
        # Check if the line is a heading based on font size  
        if is_heading(line):  
            print(f"    Heading: {line.content}")  
  
    print()  


