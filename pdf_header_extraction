import pandas as pd  
from pdfminer.high_level import extract_pages  
from pdfminer.layout import LTTextContainer, LTChar  
  
def extract_text_info(file_path):  
    data = []  
  
    for page_num, page_layout in enumerate(extract_pages(file_path), start=1):  
        for element in page_layout:  
            if isinstance(element, LTTextContainer):  
                prev_line_y = None  
                for text_line in element:  
                    text = ""  
                    font_size = 0  
                    space_up = 0  
                    space_down = 0  
  
                    # Iterate through LTChar objects and find the first character's font size  
                    for character in text_line:  
                        if isinstance(character, LTChar):  
                            font_size = character.size  
                            break  
  
                    # Build the text string and calculate vertical space  
                    for idx, character in enumerate(text_line):  
                        if isinstance(character, LTChar):  
                            text += character.get_text()  
  
                            if idx > 0 and prev_line_y is not None:  
                                space_down = prev_line_y - character.bbox[3]  
                                space_up = character.bbox[1] - prev_line_y  
  
                            prev_line_y = character.bbox[1]  
  
                    data.append({  
                        "text": text,  
                        "font_size": font_size,  
                        "space_up": space_up,  
                        "space_down": space_down,  
                        "page_num": page_num  
                    })  
  
    return pd.DataFrame(data)  
  
file_path = "path/to/your/pdf/file.pdf"  
df = extract_text_info(file_path)  
print(df)  


#########################################

#!pip install PyMuPDF  

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_y = None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        y0 = line["bbox"][1]  
  
                        if prev_line_y is not None:  
                            space_down = prev_line_y - y0  
                            space_up = y0 - prev_line_y  
                        else:  
                            space_up = 0  
                            space_down = 0  
  
                        prev_line_y = y0  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "page_num": page_num + 1  
                        })  
  
    return pd.DataFrame(data)  
  
# file_path = "path"  
# df = extract_text_info(file_path)  
# print(df)

####################################

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_x0, prev_line_x1 = None, None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        x0, y0, x1, y1 = line["bbox"]  
  
                        if prev_line_x0 is not None and prev_line_x1 is not None:  
                            space_up = y0 - prev_line_y  
                            space_down = prev_line_y - y0  
                            space_front = x0 - prev_line_x0  
                            space_back = prev_line_x1 - x1  
                        else:  
                            space_up = 0  
                            space_down = 0  
                            space_front = 0  
                            space_back = 0  
  
                        prev_line_y = y0  
                        prev_line_x0, prev_line_x1 = x0, x1  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "space_front": space_front,  
                            "space_back": space_back,  
                            "page_num": page_num + 1  
                        })  
  
    return pd.DataFrame(data)  
  
file_path = "./path"  
df = extract_text_info(file_path)  
print(df)  

##################################

import pandas as pd  
import fitz  
  
def extract_text_info(file_path):  
    data = []  
  
    with fitz.open(file_path) as doc:  
        for page_num in range(len(doc)):  
            page = doc.load_page(page_num)  
            page_dict = page.get_text("dict")  
            prev_line_x0, prev_line_x1 = None, None  
  
            for block in page_dict["blocks"]:  
                if block["type"] == 0:  # Text block  
                    for line in block["lines"]:  
                        text = "".join([span["text"] for span in line["spans"]])  
                        font_size = line["spans"][0]["size"]  
                        x0, y0, x1, y1 = line["bbox"]  
  
                        # Check if the text is bold  
                        font_name = line["spans"][0]["font"]  
                        bold = "Bold" in font_name  
  
                        if prev_line_x0 is not None and prev_line_x1 is not None:  
                            space_up = y0 - prev_line_y  
                            space_down = prev_line_y - y0  
                            space_front = x0 - prev_line_x0  
                            space_back = prev_line_x1 - x1  
                        else:  
                            space_up = 0  
                            space_down = 0  
                            space_front = 0  
                            space_back = 0  
  
                        prev_line_y = y0  
                        prev_line_x0, prev_line_x1 = x0, x1  
  
                        data.append({  
                            "text": text,  
                            "font_size": font_size,  
                            "space_up": space_up,  
                            "space_down": space_down,  
                            "space_front": space_front,  
                            "space_back": space_back,  
                            "page_num": page_num + 1,  
                            "Bold": bold  
                        })  
  
    return pd.DataFrame(data)  
  
file_path = "./path"  
df = extract_text_info(file_path)  
print(df)  
###############################

import fitz  # PyMuPDF  
  
def is_bold(font_name):  
    bold_substrings = ["bold", "black", "heavy", "bd"]  
    return any(substring.lower() in font_name.lower() for substring in bold_substrings)  
  
def extract_text_and_properties_from_pdf(file_path, page_number):  
    doc = fitz.open(file_path)  
      
    if page_number < 0 or page_number >= len(doc):  
        raise ValueError("Invalid page number")  
  
    page = doc[page_number]  
    blocks = page.get_text("dict")["blocks"]  
  
    for block in blocks:  
        if block["type"] == 0:  # Text block  
            for line in block["lines"]:  
                for span in line["spans"]:  
                    print(f"Text: {span['text']}")  
                    print(f"Fontname: {span['font']}")  
                    print(f"Size: {span['size']}")  
                    print(f"Bold: {is_bold(span['font'])}")  
                    print("----")  
  
file_path = "path/to/your/pdf/document.pdf"  
page_number = 0  # Extract information from the first page  
extract_text_and_properties_from_pdf(file_path, page_number)  


