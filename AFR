from azure.core.credentials import AzureKeyCredential  
from azure.ai.formrecognizer import FormRecognizerClient  
import pandas as pd  
  
# Set your API key and endpoint URL  
api_key = "your_form_recognizer_api_key"  
endpoint = "your_form_recognizer_endpoint"  
  
# Initialize the FormRecognizerClient  
client = FormRecognizerClient(endpoint, AzureKeyCredential(api_key))  
  
# Provide the path to your PDF file  
pdf_file = "path/to/your/pdf_file.pdf"  
  
# Read the PDF file as bytes  
with open(pdf_file, "rb") as f:  
    file_bytes = f.read()  
  
# Analyze the document layout  
poller = client.begin_recognize_content(file_bytes)  
result = poller.result()  
  
# Extract text and page numbers and store them in a list  
data = []  
for page in result:  
    for line in page.lines:  
        data.append({"page_number": page.page_number, "text": line.text})  
  
# Convert the list into a DataFrame  
df = pd.DataFrame(data)  
  
# Display the DataFrame  
print(df)  
#############################

from azure.core.credentials import AzureKeyCredential  
from azure.ai.formrecognizer import FormRecognizerClient  
import pandas as pd  
  
# Set your API key and endpoint URL  
api_key = "your_form_recognizer_api_key"  
endpoint = "your_form_recognizer_endpoint"  
  
# Initialize the FormRecognizerClient  
client = FormRecognizerClient(endpoint, AzureKeyCredential(api_key))  
  
# Provide the path to your PDF file  
pdf_file = "path/to/your/pdf_file.pdf"  
  
# Read the PDF file as bytes  
with open(pdf_file, "rb") as f:  
    file_bytes = f.read()  
  
# Analyze the document layout  
poller = client.begin_recognize_content(file_bytes)  
result = poller.result()  
  
# Extract text and page numbers and store them in a list  
data = []  
for page in result:  
    if page.lines:  
        paragraph = "\n".join(line.text for line in page.lines)  
        data.append({"page_number": page.page_number, "paragraph": paragraph})  
  
# Convert the list into a DataFrame  
df = pd.DataFrame(data)  

#########################################

import openai  
import PyPDF2  
import re  
  
# Set your OpenAI API key  
openai.api_key = "your_openai_api_key_here"  
  
# Function to extract text from a PDF file  
def extract_text_from_pdf(file_path):  
    with open(file_path, "rb") as file:  
        reader = PyPDF2.PdfFileReader(file)  
        text = ""  
        for i in range(reader.numPages):  
            text += reader.getPage(i).extractText()  
    return text  
  
# Function to divide the text into chunks  
def split_text_into_chunks(text, token_limit):  
    words = text.split()  
    chunks = []  
    current_chunk = []  
  
    for word in words:  
        if len(" ".join(current_chunk)) + len(word) < token_limit:  
            current_chunk.append(word)  
        else:  
            chunks.append(" ".join(current_chunk))  
            current_chunk = [word]  
      
    if current_chunk:  
        chunks.append(" ".join(current_chunk))  
      
    return chunks  
  
# Function to generate a summary for each chunk  
def generate_summaries(chunks):  
    summaries = []  
    for chunk in chunks:  
        response = openai.Completion.create(  
            engine="text-davinci-002",  # Replace this with GPT-4 engine when available  
            prompt=f"Please summarize the following text:\n{chunk}",  
            max_tokens=100,  
            n=1,  
            stop=None,  
            temperature=0.5  
        )  
        summary = response.choices[0].text.strip()  
        summaries.append(summary)  
      
    return summaries  
  
# Main function  
def main(file_path):  
    text = extract_text_from_pdf(file_path)  
    token_limit = 2048  # Adjust this based on GPT-4's token limit  
    chunks = split_text_into_chunks(text, token_limit)  
    summaries = generate_summaries(chunks)  
      
    print("Summaries for each chunk:")  
    for i, summary in enumerate(summaries):  
        print(f"Chunk {i+1}: {summary}")  
      
    print("\nFinal summary:")  
    final_summary = " ".join(summaries)  
    print(final_summary)  
  
if __name__ == "__main__":  
    file_path = "path_to_your_pdf_file.pdf"  
    main(file_path)  

  
# Display the DataFrame  
print(df)  

##############################

def summarize(document_prompt, user_prompt, system_prompt, model, temp=.7, tokens=750):
  response = openai.ChatCompletion.create(
          model=model,
          messages=[{"role": "system", "content": system_prompt},
                    {"role": "user", "content": document_prompt},
                    {"role": "user", "content": user_prompt}],
          temperature=temp, 
          max_tokens=tokens,
          top_p=1,
          frequency_penalty=0,
          presence_penalty=0
        )
  output_summary = response["choices"][0]["message"]["content"]
  return output_summary
