#pip install pdfplumber 


import pandas as pd  
import pdfplumber  
  
# open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # iterate over each page in the PDF file  
    clusters = {}  
    for page in pdf.pages:  
        # get the text content of the page with font size information  
        chars = page.chars  
          
        # iterate over each character in the page  
        for char in chars:  
            # get the font size of the character  
            font_size = char["size"]  
              
            # add the character to the appropriate cluster based on font size  
            if font_size in clusters:  
                clusters[font_size].append(char["text"])  
            else:  
                clusters[font_size] = [char["text"]]  
      
    # create a Pandas DataFrame with the font size and cluster of text  
    df = pd.DataFrame({'size': [], 'cluster': []})  
    for font_size, chars in clusters.items():  
        # join the characters in each cluster into a single string  
        cluster_text = ''.join(chars)  
          
        # add the font size and cluster text to the DataFrame  
        df = df.append({'size': font_size, 'cluster': cluster_text}, ignore_index=True)  
      
    # sort the DataFrame by font size in ascending order  
    df = df.sort_values(by='size')  
      
    # print the resulting DataFrame  
    print(df)  

###################################################content_extraction#######################

import re  
import pdfplumber  
  
def is_toc_entry(line):  
    # Define a regular expression pattern for table of content entries  
    pattern = r'^\s*\d+(\.\d+)*\s+.*\s+\d+\s*$'  
    return bool(re.match(pattern, line))  
  
# open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # Check each page for table of content entries  
    toc_lines = []  
    for page in pdf.pages:  
        # Extract text from the page  
        page_text = page.extract_text()  
          
        # Check each line for a table of content entry  
        for line in page_text.split('\n'):  
            if is_toc_entry(line):  
                toc_lines.append(line)  
      
    # Print the table of contents  
    toc = '\n'.join(toc_lines)  
    print(toc)  

#############################################################################################

import re  
import pdfplumber  
  
def is_toc_entry(line):  
    # Define a regular expression pattern for table of content entries  
    pattern = r'^\s*\d+\s+.*[A-Za-z]+.*\s+\d+\s*$'  
    return bool(re.match(pattern, line))  
  
# open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # Check each page for table of content entries  
    toc_lines = []  
    for page in pdf.pages:  
        # Extract text from the page  
        page_text = page.extract_text()  
          
        # Check each line for a table of content entry  
        for line in page_text.split('\n'):  
            if is_toc_entry(line):  
                toc_lines.append(line)  
      
    # Print the table of contents  
    toc = '\n'.join(toc_lines)  
    print(toc)  

##################################################################################

import re  
import pdfplumber  
  
def is_toc_entry(line):  
    # Define a regular expression pattern for table of content entries  
    pattern = r'^\s*\d+\s+.*[A-Za-z]+.*\s+\d+\s*$'  
    return bool(re.match(pattern, line))  
  
# open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # Check each page for table of content entries  
    toc_lines = []  
      
    # Limit the analysis to the first 10 pages  
    for page_number in range(min(10, len(pdf.pages))):  
        page = pdf.pages[page_number]  
          
        # Extract text from the page  
        page_text = page.extract_text()  
          
        # Check each line for a table of content entry  
        for line in page_text.split('\n'):  
            if is_toc_entry(line):  
                toc_lines.append(line)  
      
    # Print the table of contents  
    toc = '\n'.join(toc_lines)  
    print(toc)  


#######################################################################

import re  
import pdfplumber  
  
def is_toc_entry(line):  
    # Define a regular expression pattern for table of content entries  
    pattern = r'^\s*(\d+(\.\d+)*|\w+)\s+.*[A-Za-z]+.*\s+\d+\s*$'  
    return bool(re.match(pattern, line))  
  
def is_header_or_footer(line, header_footer_keywords):  
    for keyword in header_footer_keywords:  
        if keyword.lower() in line.lower():  
            return True  
    return False  
  
# List of common header/footer keywords to ignore  
header_footer_keywords = ["Chapter", "Contents", "Page", "Index"]  
  
# open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # Check each page for table of content entries  
    toc_lines = []  
      
    # Limit the analysis to the first 10 pages  
    for page_number in range(min(10, len(pdf.pages))):  
        page = pdf.pages[page_number]  
          
        # Extract text from the page  
        page_text = page.extract_text()  
          
        # Check each line for a table of content entry  
        consecutive_toc_lines = []  
        for line in page_text.split('\n'):  
            if is_toc_entry(line) and not is_header_or_footer(line, header_footer_keywords):  
                consecutive_toc_lines.append(line)  
            else:  
                # If the number of consecutive lines is greater than a threshold (e.g., 3), consider it as a TOC  
                if len(consecutive_toc_lines) > 3:  
                    toc_lines.extend(consecutive_toc_lines)  
                consecutive_toc_lines = []  
      
    # Print the table of contents  
    toc = '\n'.join(toc_lines)  
    print(toc)  

###############################################################

import pandas as pd  
import pdfplumber  
  
# Open the PDF file  
with pdfplumber.open('example.pdf') as pdf:  
    # Initialize an empty list to store the header and footer information  
    header_footer_info = []  
      
    # Iterate over each page in the PDF  
    for page_number in range(len(pdf.pages)):  
        page = pdf.pages[page_number]  
          
        # Extract the header and footer text and font size from the first and last text boxes on the page  
        header_text = page.extract_text().split('\n')[0]  
        footer_text = page.extract_text().split('\n')[-1]  
          
        words = page.extract_words()  
        header_font_size = words[0]['size'] if words else None  
        footer_font_size = words[-1]['size'] if words else None  
          
        # Append the header and footer information to the list  
        header_footer_info.append({'Page': page_number+1, 'Header Text': header_text, 'Header Font Size': header_font_size, 'Footer Text': footer_text, 'Footer Font Size': footer_font_size})  
      
    # Convert the list to a Pandas DataFrame  
    df = pd.DataFrame(header_footer_info)  
      
    # Print the DataFrame  
    print(df)  
###########################headings###################
import pandas as pd  
from pdfminer.high_level import extract_pages  
from pdfminer.layout import LTTextContainer, LTChar  
  
# Function to determine if a line contains a heading  
def is_heading(line, font_sizes):  
    for size in sorted(font_sizes, reverse=True)[:5]:  # Consider top 5 largest font sizes as headings  
        if line.startswith(f'{size}:'):  
            return True, size  
    return False, None  
  
# Extract pages from the PDF file  
pages = list(extract_pages('example.pdf'))  
headings_info = []  
  
# Iterate over each page in the PDF  
for page_number, page in enumerate(pages):  
    page_text = ""  
    font_sizes = set()  
  
    # Extract text and font sizes  
    for element in page:  
        if isinstance(element, LTTextContainer):  
            for text_line in element:  
                for character in text_line:  
                    if isinstance(character, LTChar):  
                        font_sizes.add(round(character.size, 1))  
                        page_text += f"{round(character.size, 1)}:{character.get_text()}"  
                    else:  
                        page_text += character.get_text()  
  
    # Extract headings and their sizes  
    lines = page_text.splitlines()  
    for line in lines:  
        heading, font_size = is_heading(line, font_sizes)  
        if heading:  
            headings_info.append({  
                'Page': page_number + 1,  
                'Text': line.split(':', 1)[1],  
                'Font Size': font_size,  
            })  
  
# Convert the list to a Pandas DataFrame  
df = pd.DataFrame(headings_info)  
  
# Print the DataFrame  
print(df)  

##############################
import re  
import pandas as pd  
from pdfminer.high_level import extract_text  
  
# Function to determine if a line contains a heading  
def is_heading(line):  
    # Regular expression to match common heading formats  
    pattern = r'^(\d+(\.\d+)*\s+)?([A-Z][a-z]*|[A-Z\s]+)$'  
    words = line.strip().split()  
    return re.match(pattern, line.strip()) is not None and len(words) < 7  
  
# Extract text from the PDF file  
text = extract_text('example.pdf')  
headings_info = []  
page_number = 1  
  
# Iterate over each line in the extracted text  
for line in text.splitlines():  
    # Check for a new page  
    if line.startswith("Page "):  
        try:  
            int(line.split(" ")[-1])  
            page_number += 1  
            continue  
        except ValueError:  
            pass  
  
    # Extract the headings  
    if is_heading(line):  
        headings_info.append({  
            'Page': page_number,  
            'Text': line,  
        })  
  
# Convert the list to a Pandas DataFrame  
df = pd.DataFrame(headings_info)  
  
# Print the DataFrame  
print(df)  



